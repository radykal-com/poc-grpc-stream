// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GetServiceClient is the client API for GetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetServiceClient interface {
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (GetService_GetClient, error)
}

type getServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetServiceClient(cc grpc.ClientConnInterface) GetServiceClient {
	return &getServiceClient{cc}
}

func (c *getServiceClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (GetService_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GetService_serviceDesc.Streams[0], "/protobuf.GetService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &getServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetService_GetClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type getServiceGetClient struct {
	grpc.ClientStream
}

func (x *getServiceGetClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetServiceServer is the server API for GetService service.
// All implementations must embed UnimplementedGetServiceServer
// for forward compatibility
type GetServiceServer interface {
	Get(*Request, GetService_GetServer) error
	mustEmbedUnimplementedGetServiceServer()
}

// UnimplementedGetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetServiceServer struct {
}

func (UnimplementedGetServiceServer) Get(*Request, GetService_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetServiceServer) mustEmbedUnimplementedGetServiceServer() {}

// UnsafeGetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetServiceServer will
// result in compilation errors.
type UnsafeGetServiceServer interface {
	mustEmbedUnimplementedGetServiceServer()
}

func RegisterGetServiceServer(s *grpc.Server, srv GetServiceServer) {
	s.RegisterService(&_GetService_serviceDesc, srv)
}

func _GetService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetServiceServer).Get(m, &getServiceGetServer{stream})
}

type GetService_GetServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type getServiceGetServer struct {
	grpc.ServerStream
}

func (x *getServiceGetServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _GetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.GetService",
	HandlerType: (*GetServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _GetService_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "poc.proto",
}

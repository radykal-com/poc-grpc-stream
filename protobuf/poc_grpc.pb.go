// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GetServiceClient is the client API for GetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetServiceClient interface {
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (GetService_GetStreamClient, error)
}

type getServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetServiceClient(cc grpc.ClientConnInterface) GetServiceClient {
	return &getServiceClient{cc}
}

func (c *getServiceClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.GetService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getServiceClient) GetStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (GetService_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GetService_serviceDesc.Streams[0], "/protobuf.GetService/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &getServiceGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetService_GetStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type getServiceGetStreamClient struct {
	grpc.ClientStream
}

func (x *getServiceGetStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetServiceServer is the server API for GetService service.
// All implementations must embed UnimplementedGetServiceServer
// for forward compatibility
type GetServiceServer interface {
	Get(context.Context, *Request) (*Response, error)
	GetStream(*Request, GetService_GetStreamServer) error
	mustEmbedUnimplementedGetServiceServer()
}

// UnimplementedGetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetServiceServer struct {
}

func (UnimplementedGetServiceServer) Get(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetServiceServer) GetStream(*Request, GetService_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedGetServiceServer) mustEmbedUnimplementedGetServiceServer() {}

// UnsafeGetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetServiceServer will
// result in compilation errors.
type UnsafeGetServiceServer interface {
	mustEmbedUnimplementedGetServiceServer()
}

func RegisterGetServiceServer(s *grpc.Server, srv GetServiceServer) {
	s.RegisterService(&_GetService_serviceDesc, srv)
}

func _GetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.GetService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetServiceServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetService_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetServiceServer).GetStream(m, &getServiceGetStreamServer{stream})
}

type GetService_GetStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type getServiceGetStreamServer struct {
	grpc.ServerStream
}

func (x *getServiceGetStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _GetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.GetService",
	HandlerType: (*GetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _GetService_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "poc.proto",
}
